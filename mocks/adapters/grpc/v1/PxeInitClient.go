// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/thomasmortensson/pxe-init/internal/adapters/grpc/v1"
)

// PxeInitClient is an autogenerated mock type for the PxeInitClient type
type PxeInitClient struct {
	mock.Mock
}

// ListImages provides a mock function with given fields: ctx, in, opts
func (_m *PxeInitClient) ListImages(ctx context.Context, in *v1.ListImagesRequest, opts ...grpc.CallOption) (*v1.ListImagesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.ListImagesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListImagesRequest, ...grpc.CallOption) *v1.ListImagesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListImagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListImagesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterImageMachine provides a mock function with given fields: ctx, in, opts
func (_m *PxeInitClient) RegisterImageMachine(ctx context.Context, in *v1.RegisterImageMachineRequest, opts ...grpc.CallOption) (*v1.RegisterImageMachineResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.RegisterImageMachineResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterImageMachineRequest, ...grpc.CallOption) *v1.RegisterImageMachineResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RegisterImageMachineResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.RegisterImageMachineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
