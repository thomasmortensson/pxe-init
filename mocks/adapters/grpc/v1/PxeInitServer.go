// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "github.com/thomasmortensson/pxe-init/internal/adapters/grpc/v1"
)

// PxeInitServer is an autogenerated mock type for the PxeInitServer type
type PxeInitServer struct {
	mock.Mock
}

// ListImages provides a mock function with given fields: _a0, _a1
func (_m *PxeInitServer) ListImages(_a0 context.Context, _a1 *v1.ListImagesRequest) (*v1.ListImagesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.ListImagesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListImagesRequest) *v1.ListImagesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListImagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListImagesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterImageMachine provides a mock function with given fields: _a0, _a1
func (_m *PxeInitServer) RegisterImageMachine(_a0 context.Context, _a1 *v1.RegisterImageMachineRequest) (*v1.RegisterImageMachineResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.RegisterImageMachineResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterImageMachineRequest) *v1.RegisterImageMachineResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RegisterImageMachineResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.RegisterImageMachineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedPxeInitServer provides a mock function with given fields:
func (_m *PxeInitServer) mustEmbedUnimplementedPxeInitServer() {
	_m.Called()
}
